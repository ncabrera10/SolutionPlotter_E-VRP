nodes_id = nodes_id = c(nodes_id,attributes(node)[["id"]])
type_of_cs = info_instance$nodes_df$TypeOfCS[info_instance$nodes_df$ID == attributes(node)[["id"]]]
cs_types = c(cs_types,type_of_cs)
charging_times = c(charging_times,as.double(node$charge))
waiting_times = c(waiting_times,as.double(node$wait))
}else{
nodes_id = nodes_id = c(nodes_id,attributes(node)[["id"]])
charging_times = c(charging_times,0)
waiting_times = c(waiting_times,0)
cs_types = c(cs_types,"NotACS")
}
}
head = nodes_id[2:length(nodes_id)]
tail = nodes_id[1:(length(nodes_id)-1)]
order_df = data.frame(tail,head,charge_time = charging_times[1:length(tail)],waiting_time = waiting_times[1:length(tail)],key=paste0(tail,";",head),cs_type = cs_types[1:length(tail)])
list_info_this_route = list()
list_info_this_route[["start_time"]] = start_time
list_info_this_route[["order_df"]] = order_df
info_routes[[paste0("",id_route)]] = list_info_this_route
}
return(info_routes)
}
insNum = "tc0c10s2cf1"
algor = "BKS"
info_instance = loadInstance(insNum)
info_solution = loadSolution(insNum,algor,info_instance)
route_id = c()
driving_time = c()
charging_time = c()
service_time = c()
waiting_time = c()
energy_consumption = c()
start_time = c()
iter = 1
for(route in info_solution){
tableResources = info_instance$resources_matrix_df
tableOrder = route$order_df
tableMix = tableResources[tableResources$key %in% unique(tableOrder$key),]
nodos = unique(c(tableOrder$tail,tableOrder$head))
tableOrder_aux = sqldf("SELECT a.*,b.energy,b.time from tableOrder as a LEFT JOIN
(SELECT key,energy,time FROM tableResources) as b
on a.key = b.key")
energy_vec = c()
energy_vec = c(energy_vec,info_instance$battery_capacity)
charging_times_f = c()
for(i in 1:nrow(tableOrder_aux)){
if(tableOrder_aux$cs_type[i] == "NotACS"){
energy_vec = c(energy_vec,energy_vec[length(energy_vec)] - tableOrder_aux$energy[i])
charging_times_f = c(charging_times_f,0)
}else{
charging_times_f = c(charging_times_f,calculateChargingTime(info_instance$charging_times[[tableOrder_aux$cs_type[i]]],info_instance$battery_points[[tableOrder_aux$cs_type[i]]],energy_vec[length(energy_vec)],tableOrder_aux$charge_time[i]))
energy_vec = c(energy_vec,energy_vec[length(energy_vec)] - tableOrder_aux$energy[i] + tableOrder_aux$charge_time[i])
}
}
tableOrder_aux$energy_at_each_time = energy_vec[2:length(energy_vec)]
tableOrder_aux$charging_times = charging_times_f
# Store them all:
start_time = c(start_time,route$start_time)
energy_consumption = c(energy_consumption,sum(tableMix$energy))
driving_time = c(driving_time,sum(tableMix$time))
route_id = c(route_id,iter)
service_time = c(service_time,sum(info_instance$service_times_df$ServiceTime[info_instance$service_times_df$ID %in% nodos]))
waiting_time = c(waiting_time,sum(tableOrder$waiting_time))
charging_time = c(charging_time,sum(tableOrder_aux$charging_times))
iter = iter + 1
}
finalTable = data.frame(route_id,start_time,driving_time,service_time,waiting_time,charging_time,total_time = (driving_time+service_time+waiting_time+charging_time),energy_consumption)
View(finalTable)
info_instance = loadInstance(insNum)
info_solution = loadSolution(insNum,algor,info_instance)
route_id = c()
driving_time = c()
charging_time = c()
service_time = c()
waiting_time = c()
energy_consumption = c()
start_time = c()
iter = 1
for(route in info_solution){
tableResources = info_instance$resources_matrix_df
tableOrder = route$order_df
tableMix = tableResources[tableResources$key %in% unique(tableOrder$key),]
nodos = unique(c(tableOrder$tail,tableOrder$head))
tableOrder_aux = sqldf("SELECT a.*,b.energy,b.time from tableOrder as a LEFT JOIN
(SELECT key,energy,time FROM tableResources) as b
on a.key = b.key")
energy_vec = c()
energy_vec = c(energy_vec,info_instance$battery_capacity)
charging_times_f = c()
for(i in 1:nrow(tableOrder_aux)){
if(tableOrder_aux$cs_type[i] == "NotACS"){
energy_vec = c(energy_vec,energy_vec[length(energy_vec)] - tableOrder_aux$energy[i])
charging_times_f = c(charging_times_f,0)
}else{
charging_times_f = c(charging_times_f,calculateChargingTime(info_instance$charging_times[[tableOrder_aux$cs_type[i]]],info_instance$battery_points[[tableOrder_aux$cs_type[i]]],energy_vec[length(energy_vec)],tableOrder_aux$charge_time[i]))
energy_vec = c(energy_vec,energy_vec[length(energy_vec)] - tableOrder_aux$energy[i] + tableOrder_aux$charge_time[i])
}
}
tableOrder_aux$energy_at_each_time = energy_vec[2:length(energy_vec)]
tableOrder_aux$charging_times = charging_times_f
# Store them all:
start_time = c(start_time,route$start_time)
energy_consumption = c(energy_consumption,sum(tableMix$energy))
driving_time = c(driving_time,sum(tableMix$time))
route_id = c(route_id,iter)
service_time = c(service_time,sum(info_instance$service_times_df$ServiceTime[info_instance$service_times_df$ID %in% nodos]))
waiting_time = c(waiting_time,sum(tableOrder$waiting_time))
charging_time = c(charging_time,sum(tableOrder_aux$charging_times))
iter = iter + 1
}
finalTable = data.frame(route_id,start_time,driving_time,service_time,waiting_time,charging_time,objective_function = (driving_time+waiting_time+charging_time),energy_consumption)
View(finalTable)
evaluateSolution(insNum,algor){
# Load the instance:
info_instance = loadInstance(insNum)
# Load the solution:
info_solution = loadSolution(insNum,algor,info_instance)
# Calculate the total time for each route:
route_id = c()
driving_time = c()
charging_time = c()
service_time = c()
waiting_time = c()
energy_consumption = c()
start_time = c()
iter = 1
for(route in info_solution){
tableResources = info_instance$resources_matrix_df
tableOrder = route$order_df
tableMix = tableResources[tableResources$key %in% unique(tableOrder$key),]
nodos = unique(c(tableOrder$tail,tableOrder$head))
tableOrder_aux = sqldf("SELECT a.*,b.energy,b.time from tableOrder as a LEFT JOIN
(SELECT key,energy,time FROM tableResources) as b
on a.key = b.key")
energy_vec = c()
energy_vec = c(energy_vec,info_instance$battery_capacity)
charging_times_f = c()
for(i in 1:nrow(tableOrder_aux)){
if(tableOrder_aux$cs_type[i] == "NotACS"){
energy_vec = c(energy_vec,energy_vec[length(energy_vec)] - tableOrder_aux$energy[i])
charging_times_f = c(charging_times_f,0)
}else{
charging_times_f = c(charging_times_f,calculateChargingTime(info_instance$charging_times[[tableOrder_aux$cs_type[i]]],info_instance$battery_points[[tableOrder_aux$cs_type[i]]],energy_vec[length(energy_vec)],tableOrder_aux$charge_time[i]))
energy_vec = c(energy_vec,energy_vec[length(energy_vec)] - tableOrder_aux$energy[i] + tableOrder_aux$charge_time[i])
}
}
tableOrder_aux$energy_at_each_time = energy_vec[2:length(energy_vec)]
tableOrder_aux$charging_times = charging_times_f
# Store them all:
start_time = c(start_time,route$start_time)
energy_consumption = c(energy_consumption,sum(tableMix$energy))
driving_time = c(driving_time,sum(tableMix$time))
route_id = c(route_id,iter)
service_time = c(service_time,sum(info_instance$service_times_df$ServiceTime[info_instance$service_times_df$ID %in% nodos]))
waiting_time = c(waiting_time,sum(tableOrder$waiting_time))
charging_time = c(charging_time,sum(tableOrder_aux$charging_times))
iter = iter + 1
}
finalTable = data.frame(route_id,start_time,driving_time,service_time,waiting_time,charging_time,objective_function = (driving_time+waiting_time+charging_time),energy_consumption)
}
evaluateSolution <- function(insNum,algor){
# Load the instance:
info_instance = loadInstance(insNum)
# Load the solution:
info_solution = loadSolution(insNum,algor,info_instance)
# Calculate the total time for each route:
route_id = c()
driving_time = c()
charging_time = c()
service_time = c()
waiting_time = c()
energy_consumption = c()
start_time = c()
iter = 1
for(route in info_solution){
tableResources = info_instance$resources_matrix_df
tableOrder = route$order_df
tableMix = tableResources[tableResources$key %in% unique(tableOrder$key),]
nodos = unique(c(tableOrder$tail,tableOrder$head))
tableOrder_aux = sqldf("SELECT a.*,b.energy,b.time from tableOrder as a LEFT JOIN
(SELECT key,energy,time FROM tableResources) as b
on a.key = b.key")
energy_vec = c()
energy_vec = c(energy_vec,info_instance$battery_capacity)
charging_times_f = c()
for(i in 1:nrow(tableOrder_aux)){
if(tableOrder_aux$cs_type[i] == "NotACS"){
energy_vec = c(energy_vec,energy_vec[length(energy_vec)] - tableOrder_aux$energy[i])
charging_times_f = c(charging_times_f,0)
}else{
charging_times_f = c(charging_times_f,calculateChargingTime(info_instance$charging_times[[tableOrder_aux$cs_type[i]]],info_instance$battery_points[[tableOrder_aux$cs_type[i]]],energy_vec[length(energy_vec)],tableOrder_aux$charge_time[i]))
energy_vec = c(energy_vec,energy_vec[length(energy_vec)] - tableOrder_aux$energy[i] + tableOrder_aux$charge_time[i])
}
}
tableOrder_aux$energy_at_each_time = energy_vec[2:length(energy_vec)]
tableOrder_aux$charging_times = charging_times_f
# Store them all:
start_time = c(start_time,route$start_time)
energy_consumption = c(energy_consumption,sum(tableMix$energy))
driving_time = c(driving_time,sum(tableMix$time))
route_id = c(route_id,iter)
service_time = c(service_time,sum(info_instance$service_times_df$ServiceTime[info_instance$service_times_df$ID %in% nodos]))
waiting_time = c(waiting_time,sum(tableOrder$waiting_time))
charging_time = c(charging_time,sum(tableOrder_aux$charging_times))
iter = iter + 1
}
finalTable = data.frame(route_id,start_time,driving_time,service_time,waiting_time,charging_time,objective_function = (driving_time+waiting_time+charging_time),energy_consumption)
}
finalTable
finalTable = cbind(finalTable,vector)
vector = c("Total","-",sum(finalTable$driving_time),sum(finalTable$service_time),sum(finalTable$waiting_time),sum(finalTable$charging_time),sum(finalTable$objective_function),sum(finalTable$energy_consumption))
finalTable = cbind(finalTable,vector)
finalTable = rbind(finalTable,vector)
View(finalTable)
evaluateSolution <- function(insNum,algor){
# Load the instance:
info_instance = loadInstance(insNum)
# Load the solution:
info_solution = loadSolution(insNum,algor,info_instance)
# Calculate the total time for each route:
route_id = c()
driving_time = c()
charging_time = c()
service_time = c()
waiting_time = c()
energy_consumption = c()
start_time = c()
iter = 1
for(route in info_solution){
tableResources = info_instance$resources_matrix_df
tableOrder = route$order_df
tableMix = tableResources[tableResources$key %in% unique(tableOrder$key),]
nodos = unique(c(tableOrder$tail,tableOrder$head))
tableOrder_aux = sqldf("SELECT a.*,b.energy,b.time from tableOrder as a LEFT JOIN
(SELECT key,energy,time FROM tableResources) as b
on a.key = b.key")
energy_vec = c()
energy_vec = c(energy_vec,info_instance$battery_capacity)
charging_times_f = c()
for(i in 1:nrow(tableOrder_aux)){
if(tableOrder_aux$cs_type[i] == "NotACS"){
energy_vec = c(energy_vec,energy_vec[length(energy_vec)] - tableOrder_aux$energy[i])
charging_times_f = c(charging_times_f,0)
}else{
charging_times_f = c(charging_times_f,calculateChargingTime(info_instance$charging_times[[tableOrder_aux$cs_type[i]]],info_instance$battery_points[[tableOrder_aux$cs_type[i]]],energy_vec[length(energy_vec)],tableOrder_aux$charge_time[i]))
energy_vec = c(energy_vec,energy_vec[length(energy_vec)] - tableOrder_aux$energy[i] + tableOrder_aux$charge_time[i])
}
}
tableOrder_aux$energy_at_each_time = energy_vec[2:length(energy_vec)]
tableOrder_aux$charging_times = charging_times_f
# Store them all:
start_time = c(start_time,route$start_time)
energy_consumption = c(energy_consumption,sum(tableMix$energy))
driving_time = c(driving_time,sum(tableMix$time))
route_id = c(route_id,iter)
service_time = c(service_time,sum(info_instance$service_times_df$ServiceTime[info_instance$service_times_df$ID %in% nodos]))
waiting_time = c(waiting_time,sum(tableOrder$waiting_time))
charging_time = c(charging_time,sum(tableOrder_aux$charging_times))
iter = iter + 1
}
finalTable = data.frame(route_id,start_time,driving_time,service_time,waiting_time,charging_time,objective_function = (driving_time+waiting_time+charging_time),energy_consumption)
vector = c("Total","-",sum(finalTable$driving_time),sum(finalTable$service_time),sum(finalTable$waiting_time),sum(finalTable$charging_time),sum(finalTable$objective_function),sum(finalTable$energy_consumption))
finalTable = rbind(finalTable,vector)
return(finalTable)
}
symbs = c()
cli = length(info_instance$nodes_df$CoorX)-1
symbs = info_instance$nodes_df$Type
ids = info_instance$nodes_df$ID
p = plot(coorsX,coorsY,pch=symbs,xlab = "X Coordinate (km)",ylab =  "Y Coordinate (km)",xlim=c(0,max(info_instance$nodes_df$CoorX)+5),ylim=c(0,max(info_instance$nodes_df$CoorY)+5),xaxt="n",yaxt="n")
p = plot(info_instance$nodes_df$CoorX,info_instance$nodes_df$CoorsY,pch=symbs,xlab = "X Coordinate (km)",ylab =  "Y Coordinate (km)",xlim=c(0,max(info_instance$nodes_df$CoorX)+5),ylim=c(0,max(info_instance$nodes_df$CoorY)+5),xaxt="n",yaxt="n")
p = plot(info_instance$nodes_df$CoorX,info_instance$nodes_df$CoorY,pch=symbs,xlab = "X Coordinate (km)",ylab =  "Y Coordinate (km)",xlim=c(0,max(info_instance$nodes_df$CoorX)+5),ylim=c(0,max(info_instance$nodes_df$CoorY)+5),xaxt="n",yaxt="n")
axis(1, at = seq(0, max(info_instance$nodes_df$CoorX)+5, by = 1), las=2)
axis(1, at = seq(0, max(info_instance$nodes_df$CoorX)+5, by = 10), las=2)
symbs = c()
cli = length(info_instance$nodes_df$CoorX)-1
symbs = info_instance$nodes_df$Type
ids = info_instance$nodes_df$ID
p = plot(info_instance$nodes_df$CoorX,info_instance$nodes_df$CoorY,pch=symbs,xlab = "X Coordinate (km)",ylab =  "Y Coordinate (km)",xlim=c(0,max(info_instance$nodes_df$CoorX)+5),ylim=c(0,max(info_instance$nodes_df$CoorY)+5),xaxt="n",yaxt="n")
axis(1, at = seq(0, max(info_instance$nodes_df$CoorX)+5, by = 10), las=2)
axis(2, at = seq(0, max(info_instance$nodes_df$CoorY)+5, by = 10), las=2)
text(coorsX, coorsY, ids, cex=1, pos=1, col="black")
text(info_instance$nodes_df$CoorX, info_instance$nodes_df$CoorY, ids, cex=1, pos=1, col="black")
text(info_instance$nodes_df$CoorX, info_instance$nodes_df$CoorY, ids, cex=0.8, pos=1, col="black")
symbs = c()
cli = length(info_instance$nodes_df$CoorX)-1
symbs = info_instance$nodes_df$Type
ids = info_instance$nodes_df$ID
p = plot(info_instance$nodes_df$CoorX,info_instance$nodes_df$CoorY,pch=symbs,xlab = "X Coordinate (km)",ylab =  "Y Coordinate (km)",xlim=c(0,max(info_instance$nodes_df$CoorX)+5),ylim=c(0,max(info_instance$nodes_df$CoorY)+5),xaxt="n",yaxt="n")
axis(1, at = seq(0, max(info_instance$nodes_df$CoorX)+5, by = 10), las=2)
axis(2, at = seq(0, max(info_instance$nodes_df$CoorY)+5, by = 10), las=2)
text(info_instance$nodes_df$CoorX, info_instance$nodes_df$CoorY, ids, cex=0.8, pos=1, col="black")
tableOrder = route$order_df
tableCoors = info_instance$nodes_df
View(tableMix)
View(tableOrder)
tableOrder = sqldf("SELECT a.*,b.CoorY AS tail_x,b.CoorY AS tail_y from tableOrder as a
LEFT JOIN (SELECT * from tableCoors) as b
ON a.tail = b.ID")
View(tableOrder)
View(tableCoors)
tableOrder = route$order_df
tableCoors = info_instance$nodes_df
tableOrder = sqldf("SELECT a.*,b.CoorX AS tail_x,b.CoorY AS tail_y from tableOrder as a
LEFT JOIN (SELECT * from tableCoors) as b
ON a.tail = b.ID")
tableOrder = sqldf("SELECT a.*,b.CoorX AS head_x,b.CoorY AS head_y from tableOrder as a
LEFT JOIN (SELECT * from tableCoors) as b
ON a.head = b.ID")
for(i in 1:nrow(tableOrder)){
p <- p + arrows(x0=tableOrder[i,7],x1=tableOrder[i,9],y0=tableOrder[i,8],y1=tableOrder[i,10],lty=1,col="blue",angle=30,length=0.1)
}
library(randomColoR)
library(randomcoloR)
install.packages("randomcoloR")
library(randomcoloR)
randomColor(10, luminosity="light")
p <- p + arrows(x0=tableOrder[i,7],x1=tableOrder[i,9],y0=tableOrder[i,8],y1=tableOrder[i,10],lty=1,col=randomColor(1,luminosity="light"),angle=30,length=0.1)
for(i in 1:nrow(tableOrder)){
p <- p + arrows(x0=tableOrder[i,7],x1=tableOrder[i,9],y0=tableOrder[i,8],y1=tableOrder[i,10],lty=1,col=randomColor(1,luminosity="dark"),angle=30,length=0.1)
}
tableOrder = route$order_df
tableCoors = info_instance$nodes_df
tableOrder = sqldf("SELECT a.*,b.CoorX AS tail_x,b.CoorY AS tail_y from tableOrder as a
LEFT JOIN (SELECT * from tableCoors) as b
ON a.tail = b.ID")
tableOrder = sqldf("SELECT a.*,b.CoorX AS head_x,b.CoorY AS head_y from tableOrder as a
LEFT JOIN (SELECT * from tableCoors) as b
ON a.head = b.ID")
color = randomColor(1,luminosity="dark")
for(i in 1:nrow(tableOrder)){
p <- p + arrows(x0=tableOrder[i,7],x1=tableOrder[i,9],y0=tableOrder[i,8],y1=tableOrder[i,10],lty=1,col=color,angle=30,length=0.1)
}
for(route in info_solution){
tableOrder = route$order_df
tableCoors = info_instance$nodes_df
tableOrder = sqldf("SELECT a.*,b.CoorX AS tail_x,b.CoorY AS tail_y from tableOrder as a
LEFT JOIN (SELECT * from tableCoors) as b
ON a.tail = b.ID")
tableOrder = sqldf("SELECT a.*,b.CoorX AS head_x,b.CoorY AS head_y from tableOrder as a
LEFT JOIN (SELECT * from tableCoors) as b
ON a.head = b.ID")
color = randomColor(1,luminosity="dark")
for(i in 1:nrow(tableOrder)){
p <- p + arrows(x0=tableOrder[i,7],x1=tableOrder[i,9],y0=tableOrder[i,8],y1=tableOrder[i,10],lty=1,col=color,angle=30,length=0.1)
}
}
View(finalTable)
colors = c()
route_ids = c()
route_id = 1
for(route in info_solution){
tableOrder = route$order_df
tableCoors = info_instance$nodes_df
tableOrder = sqldf("SELECT a.*,b.CoorX AS tail_x,b.CoorY AS tail_y from tableOrder as a
LEFT JOIN (SELECT * from tableCoors) as b
ON a.tail = b.ID")
tableOrder = sqldf("SELECT a.*,b.CoorX AS head_x,b.CoorY AS head_y from tableOrder as a
LEFT JOIN (SELECT * from tableCoors) as b
ON a.head = b.ID")
color = randomColor(1,luminosity="dark")
for(i in 1:nrow(tableOrder)){
p <- p + arrows(x0=tableOrder[i,7],x1=tableOrder[i,9],y0=tableOrder[i,8],y1=tableOrder[i,10],lty=1,col=color,angle=30,length=0.1)
}
colors = c(colors,color)
route_ids = c(route_ids,route_id)
route_id = route_id + 1
}
legend(x="topright",legend=route_ids,lty=c(2,1),col=colors,inset=0.05)
symbs = c()
cli = length(info_instance$nodes_df$CoorX)-1
symbs = info_instance$nodes_df$Type
ids = info_instance$nodes_df$ID
p = plot(info_instance$nodes_df$CoorX,info_instance$nodes_df$CoorY,pch=symbs,xlab = "X Coordinate (km)",ylab =  "Y Coordinate (km)",xlim=c(0,max(info_instance$nodes_df$CoorX)+5),ylim=c(0,max(info_instance$nodes_df$CoorY)+5),xaxt="n",yaxt="n")
axis(1, at = seq(0, max(info_instance$nodes_df$CoorX)+5, by = 10), las=2)
axis(2, at = seq(0, max(info_instance$nodes_df$CoorY)+5, by = 10), las=2)
text(info_instance$nodes_df$CoorX, info_instance$nodes_df$CoorY, ids, cex=0.8, pos=1, col="black")
colors = c()
route_ids = c()
route_id = 1
for(route in info_solution){
tableOrder = route$order_df
tableCoors = info_instance$nodes_df
tableOrder = sqldf("SELECT a.*,b.CoorX AS tail_x,b.CoorY AS tail_y from tableOrder as a
LEFT JOIN (SELECT * from tableCoors) as b
ON a.tail = b.ID")
tableOrder = sqldf("SELECT a.*,b.CoorX AS head_x,b.CoorY AS head_y from tableOrder as a
LEFT JOIN (SELECT * from tableCoors) as b
ON a.head = b.ID")
color = randomColor(1,luminosity="dark")
for(i in 1:nrow(tableOrder)){
p <- p + arrows(x0=tableOrder[i,7],x1=tableOrder[i,9],y0=tableOrder[i,8],y1=tableOrder[i,10],lty=1,col=color,angle=30,length=0.1)
}
colors = c(colors,color)
route_ids = c(route_ids,route_id)
route_id = route_id + 1
}
legend(x="topright",legend=route_ids,lty=c(2,1),col=colors,inset=0.05)
symbs = c()
cli = length(info_instance$nodes_df$CoorX)-1
symbs = info_instance$nodes_df$Type
ids = info_instance$nodes_df$ID
p = plot(info_instance$nodes_df$CoorX,info_instance$nodes_df$CoorY,pch=symbs,xlab = "X Coordinate (km)",ylab =  "Y Coordinate (km)",xlim=c(0,max(info_instance$nodes_df$CoorX)+20),ylim=c(0,max(info_instance$nodes_df$CoorY)+20),xaxt="n",yaxt="n")
axis(1, at = seq(0, max(info_instance$nodes_df$CoorX)+20, by = 10), las=2)
axis(2, at = seq(0, max(info_instance$nodes_df$CoorY)+20, by = 10), las=2)
text(info_instance$nodes_df$CoorX, info_instance$nodes_df$CoorY, ids, cex=0.8, pos=1, col="black")
colors = c()
route_ids = c()
route_id = 1
for(route in info_solution){
tableOrder = route$order_df
tableCoors = info_instance$nodes_df
tableOrder = sqldf("SELECT a.*,b.CoorX AS tail_x,b.CoorY AS tail_y from tableOrder as a
LEFT JOIN (SELECT * from tableCoors) as b
ON a.tail = b.ID")
tableOrder = sqldf("SELECT a.*,b.CoorX AS head_x,b.CoorY AS head_y from tableOrder as a
LEFT JOIN (SELECT * from tableCoors) as b
ON a.head = b.ID")
color = randomColor(1,luminosity="dark")
for(i in 1:nrow(tableOrder)){
p <- p + arrows(x0=tableOrder[i,7],x1=tableOrder[i,9],y0=tableOrder[i,8],y1=tableOrder[i,10],lty=1,col=color,angle=30,length=0.1)
}
colors = c(colors,color)
route_ids = c(route_ids,route_id)
route_id = route_id + 1
}
legend(x="topright",legend=route_ids,lty=c(2,1),col=colors,inset=0.05)
symbs = c()
cli = length(info_instance$nodes_df$CoorX)-1
symbs = info_instance$nodes_df$Type
ids = info_instance$nodes_df$ID
p = plot(info_instance$nodes_df$CoorX,info_instance$nodes_df$CoorY,pch=symbs,xlab = "X Coordinate (km)",ylab =  "Y Coordinate (km)",xlim=c(0,max(info_instance$nodes_df$CoorX)+50),ylim=c(0,max(info_instance$nodes_df$CoorY)+50),xaxt="n",yaxt="n")
axis(1, at = seq(0, max(info_instance$nodes_df$CoorX)+50, by = 10), las=2)
axis(2, at = seq(0, max(info_instance$nodes_df$CoorY)+50, by = 10), las=2)
text(info_instance$nodes_df$CoorX, info_instance$nodes_df$CoorY, ids, cex=0.8, pos=1, col="black")
colors = c()
route_ids = c()
route_id = 1
for(route in info_solution){
tableOrder = route$order_df
tableCoors = info_instance$nodes_df
tableOrder = sqldf("SELECT a.*,b.CoorX AS tail_x,b.CoorY AS tail_y from tableOrder as a
LEFT JOIN (SELECT * from tableCoors) as b
ON a.tail = b.ID")
tableOrder = sqldf("SELECT a.*,b.CoorX AS head_x,b.CoorY AS head_y from tableOrder as a
LEFT JOIN (SELECT * from tableCoors) as b
ON a.head = b.ID")
color = randomColor(1,luminosity="dark")
for(i in 1:nrow(tableOrder)){
p <- p + arrows(x0=tableOrder[i,7],x1=tableOrder[i,9],y0=tableOrder[i,8],y1=tableOrder[i,10],lty=1,col=color,angle=30,length=0.1)
}
colors = c(colors,color)
route_ids = c(route_ids,route_id)
route_id = route_id + 1
}
legend(x="topright",legend=route_ids,lty=c(2,1),col=colors,inset=0.05)
plotASolution <- function(info_instance,info_solution){
# Plot the nodes:
symbs = c()
cli = length(info_instance$nodes_df$CoorX)-1
symbs = info_instance$nodes_df$Type
ids = info_instance$nodes_df$ID
p = plot(info_instance$nodes_df$CoorX,info_instance$nodes_df$CoorY,pch=symbs,xlab = "X Coordinate (km)",ylab =  "Y Coordinate (km)",xlim=c(0,max(info_instance$nodes_df$CoorX)+50),ylim=c(0,max(info_instance$nodes_df$CoorY)+50),xaxt="n",yaxt="n")
axis(1, at = seq(0, max(info_instance$nodes_df$CoorX)+50, by = 10), las=2)
axis(2, at = seq(0, max(info_instance$nodes_df$CoorY)+50, by = 10), las=2)
text(info_instance$nodes_df$CoorX, info_instance$nodes_df$CoorY, ids, cex=0.8, pos=1, col="black")
# Plot the arcs:
colors = c()
route_ids = c()
route_id = 1
for(route in info_solution){
tableOrder = route$order_df
tableCoors = info_instance$nodes_df
tableOrder = sqldf("SELECT a.*,b.CoorX AS tail_x,b.CoorY AS tail_y from tableOrder as a
LEFT JOIN (SELECT * from tableCoors) as b
ON a.tail = b.ID")
tableOrder = sqldf("SELECT a.*,b.CoorX AS head_x,b.CoorY AS head_y from tableOrder as a
LEFT JOIN (SELECT * from tableCoors) as b
ON a.head = b.ID")
color = randomColor(1,luminosity="dark")
for(i in 1:nrow(tableOrder)){
p <- p + arrows(x0=tableOrder[i,7],x1=tableOrder[i,9],y0=tableOrder[i,8],y1=tableOrder[i,10],lty=1,col=color,angle=30,length=0.1)
}
colors = c(colors,color)
route_ids = c(route_ids,route_id)
route_id = route_id + 1
}
legend(x="topright",legend=route_ids,lty=c(2,1),col=colors,inset=0.05)
# Return the plot:
return(p)
}
install.packages("kulife")
library(kulife)
shiny::runApp()
install.packages("XML")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
